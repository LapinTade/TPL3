ROZE
Nicolas
TP1A1

Compte rendu ABD


1 Prise en main de l'environnement
    1.1 Mise en place d'un serveur PostgreSQL
        1.1.1 Variable d'environnement
        
        
            $> export PGSQL_DIR=/tmp/pgsql
            $> export PGSQL_PORT=5000
            $> export PATH=/opt/abd/bin/:$PATH
            $> export LD_LIBRARY_PATH=/opt/abd/lib:$PATH
            
            
        1.1.2 Configuration d'une base
        
        
            $> initdb -D $PGSQL_DIR/data
            
            
            La commande précédante permet d'initialiser l'ensemble des bases de
                données par l'instance de serveur
                
            L'option "-D repertoire" Permet de mentionner le repertoire de
                stockage des bases de données.
                
        1.1.3 Lancement du serveur
        
        
            $> postgres -D $PGSQL_DIR/data -p $PGSQL_PORT > $PGSQL_DIR/logfile 2>&1 &
            
            
            La commande "postgres" permet de lancer une instance de serveur PostgreSQL
            
            L'option "-D datadir" définit le repertoire ou se situe les données
                (bases de données) nécéssaire au fonctionnement des postgres
                
            L'option "-p port" Spécifie le numéro de port TCP/IP que l'instance PostgreSQL
                utilisera
                
            "> $PGSQL_DIR/logfile" permet de rediriger les sortie de la commande
                dans le fichier logfile. On aura ainsi une trace de l'activité
                de l'instance PostgreSQL.
                
            "2>&1" La sortie d'erreur de l'application sera aussi redirigée dans
                le fichier logfile.
                
            "&" Lance la commande en tache de fond, laissant le terminal libre
                d'utilisation
        
        1.1.4 Arrêt du serveur
        
        
            $> pg_ctl stop -D $PGSQL_DIR/data
            
            
            La commande "pg_ctl" permet de démarrer ou arreter un serveur PostgreSQL
                en spécifiant "start" ou "stop"
                
            Comme toute les autres commandes citées avant l'option "-D datadir"
                définit le répertoire où se situe les données utilisée par l'instance
                du serveur.
                
    1.2 PostgreSQL en mode interractif
        1.2.1 Connexion au serveur PostgreSQL
        
        
            $> psql -h /tmp -p $PGSQL_PORT postgres
            
            
            "psql" permet d'acceder a l'instance de PostgreSQL en ligne de commandes
                son utilisation se fait de façon similaire à MySQL.
            
            L'option "-p port" spécifie le port avec lequel on se connecte sur le serveur.
            
            A la connexion on utilise la base postgrse.
            
        1.2.2 Commandes générales
        
        
            postgres=# CREATE DATABASE temp;
            CREATE DATABASE

            La commande vient de creer la base de données "temp"
            
            
            
            postgres=# SELECT datname FROM pg_database;
              datname  
            -----------
             template1
             template0
             postgres
             temp
            (4 rows)
            
            La commande affiche les données "datname" de la base "pg_database",
                on peut lancer de cette façon du code SQL directement.
            
            
            postgres=# \l
                Name    | Owner | Encoding |   Collate   |    Ctype    | Access privileges 
            -----------+-------+----------+-------------+-------------+-------------------
             postgres  | nroze | UTF8     | fr_FR.UTF-8 | fr_FR.UTF-8 | 
             temp      | nroze | UTF8     | fr_FR.UTF-8 | fr_FR.UTF-8 | 
             template0 | nroze | UTF8     | fr_FR.UTF-8 | fr_FR.UTF-8 | =c/nroze         +
                       |       |          |             |             | nroze=CTc/nroze
             template1 | nroze | UTF8     | fr_FR.UTF-8 | fr_FR.UTF-8 | =c/nroze         +
                       |       |          |             |             | nroze=CTc/nroze
            (4 rows)

            La commande "\l" affiche les tables présente sur le serveur PostgreSQL.
                On peut y voir notement la table "temp" créée précédement.
                On obtient aussi des informations tel que l'encode des caractère
                    utilisée dans la table, les droits/privilèges d'accès, le
                    propriétaire
                    
                    
            postgres=# \c temp
            You are now connected to database "temp" as user "nroze".
            
            La commande "\c" permet d'utiliser la table temp pour les futures
                requêtes SQL. Cette commande est l'équivalent de "use" sur MySQL.
                
                
            postgres=# \q
            $>
            
            La commande "\q" permet de quitter le mode terminal et de se
                déconnecter du serveur PostgreSQL.
                
                
        1.2.3 Utilisation de fichiers en mode Batch
        
        
            psql -h /tmp -p $PGSQL_PORT postgres < batch.sql > pgsql.out
            
            
            "< batch.sql" permet de "faire entrer" le contenu de batch.sql dans
                la commande. L'instace ainsi lancée va lire dans ce fichier et
                executer le contenu.
                
            "> pgsql.out" Le résultat de la commande sera redirigé dans le fichier
                pgsql.out. Un "cat pgsql.out" permet de lire son contenu.
                
                
            $> cat pgsql.out 
              datname  
            -----------
             template1
             template0
             postgres
             temp
            (4 rows)

                                          List of databases
               Name    | Owner | Encoding |   Collate   |    Ctype    | Access privileges 
            -----------+-------+----------+-------------+-------------+-------------------
             postgres  | nroze | UTF8     | fr_FR.UTF-8 | fr_FR.UTF-8 | 
             temp      | nroze | UTF8     | fr_FR.UTF-8 | fr_FR.UTF-8 | 
             template0 | nroze | UTF8     | fr_FR.UTF-8 | fr_FR.UTF-8 | =c/nroze         +
                       |       |          |             |             | nroze=CTc/nroze
             template1 | nroze | UTF8     | fr_FR.UTF-8 | fr_FR.UTF-8 | =c/nroze         +
                       |       |          |             |             | nroze=CTc/nroze
            (4 rows)

            You are now connected to database "temp" as user "nroze".
            
            On voit que le contenu de pgsql.out est similaire aux résultats des
                commandes lancées en mode interractifs.
                         
    1.3 Prise en main de PgAdmin3
        
        Après avoir cliqué sur l'icône "prise/connection" on renseigne un nom
            (name) pour la connexion, le port à utiliser, un Username (celui de 
            notre session Unix).
        
        Nous avons a présent accès à l'architecture de la base de données. Dans
            l'arbre du panneau gauche on obtient l'arborescence suivante:
                
                -Server Groups
                    -Servers
                        -Connexion PostgreSQL (le name de la connexion)
                            -Databases(2)
                                +postgres
                                +temp
                            -Tablespaces(2)
                                pg_default
                                pg_global
                            Group Roles(0)
                            -Login Roles(1)
                                nroze (le login Unix)
        
        -Servers regroupe les connexions connues par PgAdmin3.
        -Databases contient les bases de données.
        -Tablespaces contient les tablespaces présent dans le serveur.
        -Group Roles contient les groupes utilisateurs.
        -Login Roles contient les logins ayant accès au serveur.
                              
        On peut appercevoir la table temp créé précédement.
        Lorsque l'on déroule temp on obtient l'arbre suivant:
            -temp
                +Catalogs(2)
                +Extentions(1)
                +Schemas(1)
                Slony Replication(0)
                
        - Catalogs: Contient tout les schemas créés par pgadmin.
        - Extensions: Contient  les fonctions de pgadmin.
        - Schemas: Contient les schemas créé par l'utilisateur. On trouve
            Plus bas de cette arborescence la présence de nos tables, les fonctions etc...
        - Slony: Contient tous les modules slony.

        Dans le panneau du milieu on trouve les onglets: Properties,
        Statistics, Dependencies, Dependents. Ces onglets donneront des
        informations sur les éléments des branches selectionnées.

        - Properties: Retourne les propriété de la selection.
        - Statistics: Retourne les statistiques (taille, etc...).
        - Dependencies: Retourne les dépendences lié à la selection.
        - Dependent: Retourne les éléements du quel la sélection dépend.
    
    
        Pour executer des requêtes sql on selectionne la database où l'on veut
            les executer et l'on clique sur l'icone "loupe/execute SQL".

        Une fenetre s'affiche contenant deux panneaux:
            - Un panneau à deux onglets SQL Editor et Graphical Query Builder.
                - SQL Editor: Permet d'écrire ses requetes SQL.
                - Graphical Query Builder: Permet de creer des requetes SQL facilement en mode graphique. On Sélectionne Les tables voulues et les données voulues ainsi que les contraintes.
            - Un panneau à quatre onglets: Data Output, Explain, Messages, History.
                - Data Output: On trouve ici les résultats des requetes SQL
                - Explain: Renvoie les explications des requetes de pgadmin
                - Messages: Tous les messages de pgadmin sont ici. On y trouve les messages d'erreurs par exemple:
                    "ERROR:  relation "tesetetu" does not exist
                    LINE 1: SELECT * FROM tesetEtu;"
                - History: Ici, se trouve toutes les dernières requetes
                envoyée au serveur, y compris les requètes qui ne
                fonctionnent pas.

        Pour creer une requete graphique:
            Cliquer sur l'onglet Graphical Query Builder. (RQ: Il faut
                redémarrer la fenetre requete SQL si l'on a ajouté une table
                afin de mettre à jours les données graphique [présence des
                tables par exemple]).
            SELECTionner dans l'arbre de gauche la table voulue: <nom table>/schemas/publics/<table voulue>. On peux cocher les données que 
            l'on veux.
            Si l'on a des clés étrangères on click n' drag entre les deux valeurs des deux tables pour créer un lien.
            Une fois que l'on clique sur la fleche verte pour lancer la
                requète, il nous ouvre l'onglet SQL Editor qui contient le
                code SQL de notre requete graphique.

                "SELECT 
                  etudiant.numetu, 
                  notation.note, 
                  etudiant.nom, 
                  etudiant.prenom
                FROM 
                  public.etudiant, 
                  public.notation
                WHERE 
                  etudiant.numetu = notation.numetu;"
            Dans l'onglet graphique le bas du bas permet de faire des
                opérations sur la requete. Il contient: Columns, Criteria,
                Ordering, Joins.
            - Columns: contient Les collones des tables selectionnés.
            - Criteria: Permet de mettre des conditions dans les requetes
                (les WHERE en SQL) exemple: 
                Restricted value: notation.note
                Operator: =
                Value: 20
                Connector: AND (On peux choisir soit AND ou OR, qui permet d'ibriquer les conditions dans le WHERE)
                    => Code ajouté:
                        "AND
                        notation.note = 20;"
            - Ordering: Permet de donner un ordre a notre selection:
                On y trouve les 'available columns' contenant les colonnes
                    qui ne sont pas encore rangées.
                Et à droite les colonnes que l'on veut ranger.
                Pour cela on selection la/les ligne(s) à ranger et l'on
                    clique sur l'une des flches vertes (de gauche à droite)
                    ce qui a pour effet de faire changer la ligne de colonne
                On peux maintenant choisir pour la/les ligne(s) placée(s) à
                    droite l'ordre: ASC ou DESC.
                    On obtient par exemple le code SQL:
                        "ORDER BY
                            notation.note ASC;"
            - Joins: On peux faire toute les jointures que l'on souhaite:
                Source Columns: etudiant.numetu
                Join type: =
                Destination Columns: notation.numetu
                Cette exemple à été écrit automatiquement lorsque l'on a
                relier les deux tables par le numetu. Le code SQL généré:
                    "WHERE 
                        etudiant.numetu = notation.numetu"
        - Explain Query: Lorsque l'on clique sur cette icone on obtient
            Une explication de la requete lancée. Cette explication
            est graphique.
            On y voit les tables des selections et les étapes faites pour
                les joindres.
            En passant la souris sur les elements graphique on y trouve des
                informations tel que le cout, la hauteur de tableau ou la
                largeur.


2
    2.1 Intégrité de données
        1. Limiter les valeurs des notes à l’intervalle [0; 20].
            > ALTER TABLE notation ADD CHECK ( note BETWEEN 0 AND 20);

            Succes:     INSERT INTO Notation VALUES (110, 41031, 10);
            Fail:   INSERT INTO Notation VALUES (222, 41031, 21);
            Message: 
                "ERROR: new row for relation "notation" violates check constraint "notation_note_check1"
                SQL state: 23514
                Detail: Failing row contains (222, 41031, 21)."

        2. Limiter les valeurs de codes postaux à un intervalle valide.
            > ALTER TABLE etudiant ADD CHECK ( cp BETWEEN '1000' AND '90000');

            Succes:     INSERT INTO Etudiant VALUES (333, 'Dupo', 'George', '1992-06-01', 'Rue de Ici', '25000', 'Besac');
            Fail:   INSERT INTO Etudiant VALUES (444, 'Pontdu', 'Albert', '1991-06-01', 'Rue de Pala', '92000', 'Haha');
            Message:
                "ERROR: new row for relation "etudiant" violates check constraint "etudiant_cp_check"
                SQL state: 23514
                Detail: Failing row contains (444, Pontdu, Albert, 1991-06-01, Rue de Pala, 92000, Haha)."

        3. Garantir que le code postal est inexistant si la ville n’est pas saisie.
            > ALTER TABLE Etudiant ADD CHECK ((ville IS NULL AND rue IS NULL) OR (ville IS NOT NULL)) ;

            Succes:     INSERT INTO Etudiant VALUES (555,'Allan','Parish','1990-11-02','Rue des champs',90000, 'Belfort') ;
            fail:   INSERT INTO Etudiant VALUES (666,'Jean','Paul','1991-11-01','Rue des bois',25000,NULL) ;
            Message:
                "ERROR: new row for relation "etudiant" violates check constraint "etudiant_check"
                SQL state: 23514
                Detail: Failing row contains (777, Jean, Paul, 1991-11-01, Rue des bois, 25000, null)."

        4. Garantir que la rue est inexistante si le code postal et la ville ne sont pas saisis.
            > ALTER TABLE Etudiant ADD CHECK ((ville IS NULL AND cp IS NULL AND rue is NULL) OR (ville IS NOT NULL OR cp IS NOT NULL)) ;

            Succes: INSERT INTO Etudiant VALUES (888, 'Beta', 'Alpha', '1950-06-06', NULL, NULL, NULL);
            Fail:   INSERT INTO Etudiant VALUES (999,'Truc','Much','1996-04-03','Rue de Chose',NULL,NULL) ;
            Message:
                "ERROR: new row for relation "etudiant" violates check constraint "etudiant_check"
                SQL state: 23514
                Detail: Failing row contains (999, Truc, Much, 1996-04-03, Rue de Chose, null, null)."

        5. Bien que chaque étudiant puisse concourir, aucune note ne peut être saisie pour les étudiants mineurs.
            >

            Succes:
            Fail:
            Message:
                ""



3 Gestion de spectacle
    3.3 Requète de selection

        1. Quelles sont les dates du concert de Corneille au Zenith de Paris ?

            >
            "SELECT conc.Date FROM Concert conc, Spectacle spec, Salle sal
            WHERE conc.Spectacle_ID=spec.Spectacle_ID
            AND spec.Salle_ID=sal.Salle_ID
            AND spec.Chanteur='Corneille'
            AND sal.Nom='Zénith'
            AND sal.Adresse='Paris'"

        2. Quels sont les noms des salles ayant la plus grande capacité ?

            >
            "SELECT nom, adresse
            FROM Salle
            WHERE Capacite=(
                SELECT MAX(Capacite) FROM Salle
            );"

        3. Quels sont les chanteurs n’ayant jamais réalisé de concert à la Cigale ?

            >
            "SELECT Chanteur FROM Spectacle 
            WHERE Chanteur NOT IN(
                SELECT Chanteur FROM Spectacle spec, Salle sal 
                WHERE spec.Salle_ID=sal.Salle_ID
                AND sal.nom='La Cigale'
                AND spec.Chanteur IS NOT NULL
            );"

        4. Quels sont les chanteurs ayant réalisé au moins un concert dans toutes les salles ?

            >
            "SELECT Chanteur
            FROM Spectacle, Concert
            WHERE Spectacle.Spectacle_ID=Concert.Spectacle_ID
            GROUP BY Chanteur 
            HAVING COUNT(DISTINCT Salle_ID) = (
                SELECT COUNT(DISTINCT Salle_ID)
                FROM Spectacle
            );"

            Pour réaliser cette requète il a fallu ajouter un concert 
                pour Corneille (il lui restait une seul salle où il n'as
                pas fais de concert)

        5. Quels sont les dates et les identificateurs des concerts pour lesquels il ne reste aucun billet invendu ?

            >
            "SELECT conc.Date,conc.Concert_ID FROM Concert conc, Spectacle spec, Salle sal 
            WHERE conc.Spectacle_ID=spec.Spectacle_ID
            AND spec.Salle_ID=sal.Salle_ID
            AND sal.Capacite=(
                SELECT count(vent.Billet_ID) FROM Vente vent, Billet bil
                WHERE vent.Billet_ID=bil.Billet_ID
                AND bil.Concert_ID=conc.Concert_ID
                AND conc.Spectacle_ID=spec.Spectacle_ID
                AND spec.Salle_ID=sal.Salle_ID
                GROUP BY bil.Concert_ID
            );"

            Afin de rendre possible cette requete il a fallu se creer un
            concert et une salle à place limitée, afin de pouvoir inserer
            un nombre de vente limité.
